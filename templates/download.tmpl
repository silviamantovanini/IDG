#! /bin/bash -l

set -x

echo "${GXBASE}"

pipeuser=PIPEUSER
base=BASEDIR
stem=STEM
tres=TRES
fres=FRES
edgeflag=EDGEFLAG

decmin=DECMIN
decmax=DECMAX
ramin=RAMIN
ramax=RAMAX
channel=CHANNEL

#Using search_obsids.py create 2 files with list of GLEAM and GLEAM-X obsids for a specific channel. 
if [[ ! -e "GLEAM_${channel}.txt" || ! -e "GLEAM-X_${channel}.txt" ]]
then
    python /software/projects/mwasci/smantovanini/GLEAM-X-pipeline/gleam_x/bin/search_obs.py --minra ${ramin} --maxra ${ramax} --mindec ${decmin} --maxdec ${decmax} --chan ${channel} --output_G GLEAM_${channel}.txt --output_GX GLEAM-X_${channel}.txt
    cut -d " " -f 1 GLEAM_${channel}.txt | sed '1d' >> total${channel}.txt
    cut -d " " -f 1 GLEAM-X_${channel}.txt | sed '1d' >> total${channel}.txt

    cut -d " " -f 1 GLEAM_${channel}.txt | sed '1d' > G-${channel}.txt
    cut -d " " -f 1 GLEAM-X_${channel}.txt | sed '1d' > GX-${channel}.txt
else
    echo "The lists of obsids have already been generated."
fi
  
#Create pairs of G and GX (run this after postimage and before aterm because i would probably through in the bin some of them).
#if [[ ! -e "GLEAM_${channel}.txt" && ! -e "GLEAM-X_${channel}.txt" ]]
#then
#    match_idg_obsid_pairs.py -o pairs -d Matched --gleamx-obsids GLEAM-X_${channel}.txt --gleam-obsids GLEAM_${channel}.txt
#    cut -d " " -f 1 pairs_obsids.txt >> obsids.txt
#    cut -d " " -f 2 pairs_obsids.txt >> obsids.txt  
#else
#    echo "Obsids are matched."
#fi


# Add the metadata to the observations table in the database
# import_observations_from_db.py --obsid "${obslist}"

cd "${base}" || exit 1

dllist=""
list=$(cat "total${channel}.txt")
if [[ -e "total${channel}.txt_manta.tmp" ]] ; then rm "total${channel}.txt_manta.tmp" ; fi

# Set up telescope-configuration-dependent options
# Might use these later to get different metafits files etc
for obsnum in $list
do
    # Note this implicitly 
    if [[ $obsnum -lt 1151402936 ]] ; then
        telescope="MWA128T"
        basescale=1.1
        if [[ -z $freqres ]] ; then freqres=40 ; fi
        if [[ -z $timeres ]] ; then timeres=4 ; fi
    elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
        telescope="MWAHEX"
        basescale=2.0
        if [[ -z $freqres ]] ; then freqres=40 ; fi
        if [[ -z $timeres ]] ; then timeres=8 ; fi
    elif [[ $obsnum -ge 1191580576 ]] ; then
        telescope="MWALB"
        basescale=0.5
        if [[ -z $freqres ]] ; then freqres=40 ; fi
        if [[ -z $timeres ]] ; then timeres=4 ; fi
    fi

    if [[ -d "${obsnum}/${obsnum}.ms" ]]
    then
        echo "${obsnum}/${obsnum}.ms already exists. I will not download it again."
    else
        if [[ -z ${gpubox} ]]
        then
            preprocessor='birli'
            echo "obs_id=${obsnum}, preprocessor=${preprocessor}, delivery=acacia, job_type=c, avg_time_res=${timeres}, avg_freq_res=${freqres}, flag_edge_width=${edgeflag}, output=ms" >>  "total${channel}.txt_manta.tmp"
            stem="ms"
        else
            echo "obs_id=${obsnum}, delivery=acacia, job_type=d, download_type=vis" >>  "total${channel}.txt_manta.tmp"
            stem="vis"
        fi
        dllist=$dllist"$obsnum "
    fi
done

#Lastly download each pair of obsids in different folder.
cd "${base}" || exit 1
list=$(awk '{print substr($1,8,10)}' < "total${channel}.txt_manta.tmp")
n=1
for obsnum in $list
do
    track_task.py start --jobid="${SLURM_JOBID}" --taskid=$n --start_time="$(date +%s)"
    ((n+=1))
done

export SSL_VERIFY=0
mwa_client --csv="total${channel}.txt_manta.tmp" --dir="${base}"

n=1
for obsnum in $list
do
    cd "${base}" || exit 1
    obsfile=$(echo ./"${obsnum}_"[0-9]*"_${stem}.tar")
    
    #Ensure that a file exists before attempting to match to the download mode
    if [[ ! -e "${obsfile}" ]]
    then 
        echo "No file corresponding to obsid ${obsnum} found."
        track_task.py fail --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"    
    
    #Now process the specific modes
    elif [[ "${stem}" == "ms" ]]
    then 
        if [[ ! -d "${obsnum}" ]]
        then
            mkdir "${obsnum}"
        fi

        cd "${obsnum}" || exit 1

        if [[ -d "${obsnum}.ms" ]]
        then
            echo "${obsnum}.ms already exists; please remove directory before running untar job."
            track_task.py fail --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"
        else
            mv "../${obsfile}" ./ 
            tar xf "${obsfile}"
            
            #Ensure that tar operation was successful
            if [[ $? ]]
            then
                rm "${obsfile}"
                track_task.py finish --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"
            
                if [[ ${obsnum} -ge 1314921618 ]]
                then 
                    echo "Applying flagmwa"
                    nfreqchan=$(echo "80 / $fres" | bc )
                    nsubbands=24

                    # Andrew Williams suggests the worst case the the typical worst case for attenuators to settle is 2.5 seconds. 
                    ntsquack=1
                    if (( $(echo "$tres < 2.5" | bc -l) ))
                    then 
                        ntsquack=$(echo "(2.5+$tres)/$tres" | bc)
                    fi

                    echo "Flagging ${nfreqchan} edge channels across ${nsubbands} sub-bands, and quacking ${ntsquack} timesteps"

                    flagmwa \
                        "${obsnum}.ms" \
                        $ntsquack \
                        $nsubbands \
                        1 \
                        $nfreqchan 
                fi

            else
                echo "Failed to untar ${obsfile}"
                track_task.py fail --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"
            fi
            cd ../
        fi    
    elif [[ "$stem" == 'vis' ]]
    then
        echo "${obsfile} downloaded successfully; now run cotter."
        track_task.py finish --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"
        track_task.py obs_status --obs_id="${obsnum}" --status='downloaded'
    elif [[ "$stem" == 'astro' ]]
    then 
        echo "astro delivery mode not yet supported by obs_mantra. "
        track_task.py fail --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"
    else
        echo "No operation available for ${stem} mode for obsid ${obsnum}."
        track_task.py fail --jobid="${SLURM_JOBID}" --taskid="${n}" --finish_time="$(date +%s)"
    fi
    ((n+=1))
done
