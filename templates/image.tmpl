#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

# Set version number
base=BASEDIR
debug=DEBUG
# Which data column to image
if [[ ! -z $debug ]]
then
    datacolumn="CORRECTED_DATA"
else
    datacolumn="DATA"
fi

# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# Minimum uvw for self-calibration (in lambda)
minuv=75
# S/N Level at which to choose masked pixels for deepclean
msigma=3
# S/N Threshold at which to stop cleaning
tsigma=1

# Update database
cd "${base}" || exit
track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

datadir="${base}/${obsnum}"
cd "${datadir}" || exit

# TODO: replace with find
metafits="$(ls -t ${obsnum}*metafits* | head -1)"

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
fi

# Set up channel-dependent options
chan="$(pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)

# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Naming convention for output files
lowfreq=$(echo "${centfreq}" "${bandwidth}" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}')
highfreq=$(echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}')
freqrange="${lowfreq}-${highfreq}"

# Calculate min uvw in metres
minuvm=$(echo "234 * $minuv / $chan" | bc -l)

# Found that multiscale cleaning recovers flux density in the extragalactic sky better than not, and doesn't add much to processing time
multiscale="-multiscale -mgain 1 -multiscale-gain 0.15"

# Create a template image that has all the same properties as our eventual WSClean image
#if [[ ! -e "${obsnum}_template.fits" ]]
#then
#    wsclean \
#            -abs-mem ${GXMEMORY} \
#            -mgain 1.0 \
#            -nmiter 1 \
#            -niter 0 \
#            -name ${obsnum}_template \
#            -size 4000 4000 \
#            -scale ${scale:0:8} \
#            -pol XX \
#            -data-column ${datacolumn} \
#            -channel-range 4 5 \
#            -interval 4 5 \
#            -nwlayers ${GXNCPUS} \
#            "${obsnum}.ms"

#    rm "${obsnum}_template-dirty.fits"
#    mv "${obsnum}_template-image.fits" "${obsnum}_template.fits"
#fi

# Dirty image for a test
wsclean \
    -name ${obsnum}_test \
    -size 20000 20000 \
    -scale ${scale:0:8} \
    -join-channels \
    -use-wgridder \
    -data-column ${datacolumn} \
    "${obsnum}.ms"

# Shallow clean for a test
#if [[ ! -e "${obsnum}_shallow-0767-image.fits" ]]
#then
#    wsclean \
#        $multiscale \
#        -nmiter 1 \
#        -niter 0 \
#        -no-update-model-required \
#        -name ${obsnum}_shallow \
#        -size 4000 4000 \
#        -scale ${scale:0:8} \
#        -weight briggs ${robust} \
#        -pol I \
#        -no-dirty \
#        -intervals-out 27 \
#        -data-column ${datacolumn} \
#        "${obsnum}.ms" | tee wsclean.log
#fi

#For each of the 768 channel run BANE
#if [[ ! -e "${obsnum}_shallow-0767-image_rms.fits" ]]
#then
#    for i in $(seq -w 0767)
#    do
#        BANE --cores 1 --compress --noclobber --grid 20 20 --box 122 122 "${obsnum}_shallow-${i}-image.fits"
#    done
#fi

#if [[ ! -e "{obsnum}_rms_per_channel.png" ]]
#then
#    python /software/projects/mwasci/smantovanini/GLEAM-X-pipeline/gleam_x/bin/rms.py --obsid ${obsnum}
#fi 
