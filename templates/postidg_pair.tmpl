#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum1=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}" | cut -d " " -f1)
    obsnum2=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}" | cut -d " " -f2)
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
    if [[ $1 != 0 ]]
    then
        track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
        exit "$1"
    fi
}

track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

# Makes fits_warp parallelisation work on Zeus
# export KMP_INIT_AT_FORK=false

# Sub-channels
subchans="0000 0001 0002 0003 MFS"

# flux_warp method
method=scaled

# Sky model
POS_MODEL_CATALOGUE="${GXBASE}/models/NVSS_SUMSS_psfcal.fits"
FLUX_MODEL_CATALOGUE="${GXBASE}/models/GGSM_sparse_unresolved.fits"
# Set max separation for flux_warp crossmatch as ~ 1' -- unlikely that the ionosphere would be that brutal
separation=$(echo "60/3600" | bc -l)

# Set exclusion for flux_warp internal exclusive crossmatch as ~ 3'
exclusion=$(echo "180/3600" | bc -l)

datadir=BASEDIR
cd "${datadir}" || exit 1

metafits1="${datadir}/${obsnum1}/${obsnum1}.metafits"
if [[ ! -e ${metafits1} ]] || [[ ! -s ${metafits1} ]]
then
    wget -O "${metafits1}" http://ws.mwatelescope.org/metadata/fits?obs_id=${obsnum1}
    test_fail $?
fi

chan=$(pyhead.py -p CENTCHAN "$metafits1" | awk '{print $3}')
ra=$(pyhead.py -p RA "$metafits1" | awk '{print $3}')
dec=$(pyhead.py -p DEC "$metafits1" | awk '{print $3}')
b=$(python -c "import astropy.units as u; from astropy.coordinates import SkyCoord; print(abs(SkyCoord($ra*u.deg, $dec*u.deg).galactic.b.deg))")
minsrcs=500
if [[ "${chan}" -eq 69 ]] && (( $(echo  "$b < 10" | bc -l) ))
then
    minsrcs=50
fi

BMAJ=$(pyhead.py -p BMAJ "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits" | awk '{print $3}' )
if [[ "$BMAJ" == "0"  ]]
then
    echo "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits has zero-size PSF: something is broken!"
    exit 1
fi
        
BANE --cores 1 --noclobber "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits"
aegean --cores ${GXNCPUS} --autoload --table="./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits" "./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits" > >(tee -a "${obsnum1}_${obsnum2}_pair_deep-MFS_aegean.log") 2> >(tee -a "${obsnum1}_${obsnum2}_pair_deep-MFS_aegean.log" >&2)

nsrc=$(grep "INFO found" "${obsnum1}_${obsnum2}_pair_deep-MFS_aegean.log" | head -1 | awk '{print $3}')
if [[ $nsrc -lt $minsrcs ]]
then
    echo "Can't warp image -- only $nsrc sources and minimum required id $minsrcs -- probably a horrible image"
else
    RA=$(pyhead.py -p RA "$metafits1" | awk '{print $3}' )
    Dec=$(pyhead.py -p DEC "$metafits1" | awk '{print $3}' )
    chan=$(pyhead.py -p CENTCHAN "$metafits1" | awk '{print $3}' )
    mid=$(pyhead.py -p CRVAL3 "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits" | awk '{print $3}' )
    freqq=$(echo "$mid" | awk '{printf "%03.0f",($1)/1e6}')
        
    # Roughly the centre and radius of the image:
    coords="$RA $Dec"
    radius=50. #24.8
        
    if [[ ! -e "${obsnum1}_${obsnum2}_pair_deep-MFS_complete_sources_xm.fits" ]]
    then
        fits_warp.py \
        --incat "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_comp.fits" \
        --refcat "${POS_MODEL_CATALOGUE}" \
        --xm "${obsnum1}_${obsnum2}_pair_deep-MFS_complete_sources_xm.fits" \
        --plot \
        --ra1 ra \
        --dec1 dec \
        --ra2 RAJ2000 \
        --dec2 DEJ2000 \
        --infits "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits"
    fi
        
    if [[ ! -e "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp.fits" ]]
    then
        fits_warp.py --incat "./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_comp.fits" \
        --refcat "${POS_MODEL_CATALOGUE}" \
        --corrected "./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_comp_warp-corrected.fits" \
        --xm "./${obsnum1}_${obsnum2}_pair_deep-MFS_fits_warp_xm.fits" \
        --suffix warp \
        --infits "./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb.fits" \
        --ra1 ra --dec1 dec \
        --ra2 RAJ2000 --dec2 DEJ2000 \
        --plot \
        --nsrcs 750 \
        --vm 10 \
        --progress \
        --cores ${GXNPCPUS} \
        --signal peak_flux_1 \
        --enforce-min-srcs 100
    fi

        
    if [[ ! -e ${obsnum1}_${obsnum2}_pair_deep-MFS_xm.fits ]]
    then
        # flux_wrap dependency here
        # Match the image catalogue to the model table:
        match_catalogues \
        "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_comp_warp-corrected.fits" \
        "${FLUX_MODEL_CATALOGUE}" \
        --separation "${separation}" \
        --exclusion_zone "${exclusion}" \
        --outname "./${obsnum1}_${obsnum2}_pair_deep-MFS_xm.fits" \
        --threshold 0.5 \
        --nmax 1000 \
        --coords ${coords} \
        --radius "${radius}" \
        --ra2 "RAJ2000" \
        --dec2 "DEJ2000" \
        --ra1 "ra" \
        --dec1 "dec" \
        -F "int_flux" \
        --eflux "err_int_flux" \
        --localrms "local_rms"
    fi
    if [[ ! -e "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp_${method}_cf_output.txt" ]]
    then
        flux_warp \
        "${obsnum1}_${obsnum2}_pair_deep-MFS_xm.fits" \
        "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp.fits" \
        --mode mean \
        --freq "${freqq}" \
        --threshold 0.5 \
        --nmax 400 \
        --flux_key "flux" \
        --smooth 5.0 \
        --ignore_magellanic \
        --localrms_key "local_rms" \
        --add-to-header \
        --ra_key "RAJ2000" \
        --dec_key "DEJ2000" \
        --index "alpha" \
        --curvature "beta" \
        --ref_flux_key "S_200" \
        --ref_freq 200.0 \
        --alpha -0.77 \
        --plot \
        --cmap "gnuplot2" \
        --update-bscale \
        --order 2 \
        --ext png \
        --nolatex
    fi
    factor=$(pyhead.py -p BSCALE "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp.fits" | awk '{print $3}')
      
    # The RMS and BKG maps will not have changed much from the ionospheric warping, so I can just
    # rename them and update BSCALE
    mv "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_rms.fits" "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp_rms.fits"
    mv "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_bkg.fits" "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp_bkg.fits"
    pyhead.py -u BSCALE "$factor" "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp_bkg.fits"
    pyhead.py -u BSCALE "$factor" "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp_rms.fits"
        
    # rerun the source-finding -- don't save to the log this time as the numbers should not have changed
    if [[ ! -e "${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp_comp.fits" ]]
    then
        aegean --cores ${GXNCPUS} --autoload --table="./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp.fits" "./${obsnum1}_${obsnum2}_pair_deep-MFS-image-pb_warp.fits"
    fi
fi

track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
