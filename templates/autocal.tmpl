#! /bin/bash -l
set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

df -h | grep /nvmetmp

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid=${SLURM_ARRAY_TASK_ID}
    jobid=${SLURM_ARRAY_JOB_ID}

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "autocal obsid ${obsnum}"
else
    taskid=1
    jobid=${SLURM_JOB_ID}
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

cores=${GXNCPUS}
datadir=DATADIR
if [[ $obsnum -gt 1300000000 ]] && [[ $obsnum -lt 1342950000 ]]
then
    refant=0
elif [[ $obsnum -gt 1342950000 ]]
then
    refant=8
else
    refant=127
fi
fraction=FRACTION
sthresh=STHRESH

# GLEAM-X sky model
catfile="${GXBASE}/models/GGSM_updated.fits"

# MWA beam information
MWAPATH="${GXMWAPB}"

# Minimum baseline of 75 lambda (=250m at 88 MHz) for calibration
minuv=75

# Perform ionospheric triage? (1 means yes, blank means no)
ion=IONOTEST
# Interval for ionospheric triage (in time steps)
# Typically we have 2-minute observations which have been averaged to 4s
# So in total they contain 30 time steps
# Do do useful ionospheric differencing we need to compare the start and the end
ts=10

# start
track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

cd "${datadir}/${obsnum}" || exit

metafits="${obsnum}.metafits"
if [[ ! -e ${metafits} ]] || [[ ! -s ${metafits} ]]
then
    wget -O "${metafits}" http://ws.mwatelescope.org/metadata/fits?obs_id=${obsnum}
    test_fail $?
fi

calibrator=$( pyhead.py -p CALIBSRC "$metafits" | awk '{print $3}' )
echo "Calibrator is $calibrator"

echo "Running infield calibration for $obsnum"
RA=$( pyhead.py -p RA "$metafits" | awk '{print $3}' )
Dec=$( pyhead.py -p DEC "$metafits" | awk '{print $3}' )
chan=$( pyhead.py -p CENTCHAN "$metafits" | awk '{print $3}' )

if [[ ! -e "${obsnum}_local_gleam_model.txt" ]]
then
    # crop_catalogue.py --ra="${RA}" --dec="${Dec}" --radius=30 --minflux=1.0 --metafits="${metafits}" \
    #                     --catalogue="${catfile}" --fluxcol=S_200 --plot "${obsnum}_local_gleam_model.png" \
    #                     --output "${obsnum}_cropped_catalogue.fits"
    crop_catalogue.py --ra="${RA}" --dec="${Dec}" --radius=30 --top-bright=250 --metafits="${metafits}" \
                        --catalogue="${catfile}" --fluxcol=S_200 --plot "${obsnum}_local_gleam_model.png" \
                        --output "${obsnum}_cropped_catalogue.fits"
    vo2model.py --catalogue="${obsnum}_cropped_catalogue.fits" --point --output="${obsnum}_local_gleam_model.txt" \
                --racol=RAJ2000 --decol=DEJ2000 --acol=a --bcol=b --pacol=pa --fluxcol=S_200 --alphacol=alpha
fi
calmodel="${obsnum}_local_gleam_model.txt"

cd "${datadir}/${obsnum}" || exit

cp -rf ./${obsnum}.ms /nvmetmp/

# Check whether the phase centre has already changed
# Calibration will fail if it has, so measurement set must be shifted back to its original position
current=$(chgcentre "/nvmetmp/${obsnum}.ms") 

if [[ $current == *"shift"* ]] 
then
    echo "Detected that this measurement set has undergone a denormal shift; this must be undone before calibration."
    coords=$($GXBASE/gleam_x/bin/calc_optimum_pointing.py --metafits "${metafits}")
    echo "Optimally shifting co-ordinates of measurement set to $coords, without zenith shiftback."
    chgcentre \
            "/nvmetmp/${obsnum}.ms" \
            ${coords}
else
    echo "Detected that this measurement set has not yet had its phase centre changed. Not shifting."
fi

# uv range for calibration based on GLEAM-based sky model
# Calibrate takes a maximum uv range in metres
# Calculate min uvw in metres
minuvm=$(echo "234 * ${minuv} / ${chan}" | bc -l)
# In wavelengths, maximum 128T baseline at 200MHz was 1667 lambda long
# 300/1.28 * 1667 = 390000
# Calculate max uvw in metres
maxuvm=$(echo "390000 / (${chan} + 11)" | bc -l)

if [[ ! -z $ion ]]
then
    echo "Performing ionospheric triage. "
    # Ionospheric triage
    solutions="${obsnum}_${calmodel%%.txt}_solutions_ts${ts}.bin"
    # Remove duplicate obsnum
    solutions="${solutions/${obsnum}_${obsnum}_/${obsnum}_}"
    
    calibrate \
            -t ${ts} \
            -j ${cores} \
            -absmem ${GXMEMORY} \
            -m "${calmodel}" \
            -minuv ${minuvm} \
            -maxuv ${maxuvm} \
            -applybeam -mwa-path "${MWAPATH}" \
            "/nvmetmp/${obsnum}.ms" \
            "${solutions}"
    
    echo "Ionospheric calibration finished. Creating plots and statistics. "
    aocal_plot.py --refant="${refant}" --amp_max=2 "${solutions}"
    aocal_diff.py --metafits="${metafits}" --names "${solutions}" --refant="${refant}"
    iono_update.py --ionocsv "${obsnum}_ionodiff.csv"
fi

# At the moment, assume that the ionosphere is OK, and derive some real solutions
solutions="${obsnum}_${calmodel%%.txt}_solutions_initial.bin"
# Remove duplicate obsnum
solutions="${solutions/${obsnum}_${obsnum}_/${obsnum}_}"

# calibrate
calibrate \
        -j ${cores} \
        -absmem ${GXMEMORY} \
        -m "${calmodel}" \
        -minuv $minuvm \
        -maxuv $maxuvm \
        -applybeam -mwa-path "${MWAPATH}" \
        "/nvmetmp/${obsnum}".ms \
        "${solutions}"
test_fail $?

# Create a version divided through by the reference antenna, so that all observations have the same relative XY phase, allowing polarisation calibration solutions to be transferred
# This also sets the cross-terms to zero by default
aocal_phaseref.py "${solutions}" "${solutions%.bin}_ref.bin" "${refant}" --xy -2.806338586067941065e+01 --dxy -4.426533296449057023e-07  --ms "/nvmetmp/${obsnum}.ms"

# plot calibration solutions
aocal_plot.py --refant="${refant}" --amp_max=2 "${solutions%.bin}_ref.bin"
test_fail $?

# Test to see if the calibration solution meets minimum quality control. At the moment
# this is a simple check based on the number of flagged solutions
# result=$(check_assign_solutions.py -t "${fraction}" -s 4 --segment-threshold ${sthresh} check "${solutions%.bin}_ref.bin")
result=$(check_assign_solutions.py -t "${fraction}" check "${solutions%.bin}_ref.bin")
if echo "${result}" | grep -q fail
then
    mv "${solutions%.bin}_ref.bin" "${solutions%.bin}_ref_failed.bin"
    test_fail 1
fi

rm -rf ./${obsnum}.ms && cp -rf /nvmetmp/${obsnum}.ms ./

track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
