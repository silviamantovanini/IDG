#!/bin/bash -l

pipeuser=PIPEUSER

set -x

base=BASEDIR
obslist=OBSLIST
ra=RAPOINT
dec=DECPOINT
mosaicdir=MOSAICDIR
filtered=FILTERED

cd "${base}" || exit 1
obss_GX=($(sort $obslist | cut -d ' ' -f1))
obss_G=($(sort $obslist |cut -d ' ' -f2))

pos=$(calc_mean_pos.py --filter-obsids "${obss_GX}" --ra-field RA --dec-field DEC --refine-position ./*/*.metafits )

if [ -z $ra ]
then
    ra=$(echo "${pos}" | cut -d ' ' -f1)
fi 

if [ -z $dec ]
then
    dec=$(echo "${pos}" | cut -d ' ' -f2)
fi

if [[ ! -z ${filtered} ]]
then 
    filtered="_filtered"
fi

if [[ -z ${mosaicdir} ]]
then
    if [[ -z ${filtered} ]]
    then
        mosaicdir='mosaic'
    else
        mosaicdir='filtered_mosaic'
    fi
fi

taskid=${SLURM_ARRAY_TASK_ID}
jobid=${SLURM_ARRAY_JOB_ID}
subchans=(0000 0001 0002 0003 MFS)
subchan=${subchans[$SLURM_ARRAY_TASK_ID]}

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"
echo "subchan: ${subchan}"

track_task.py start_mosaic  --jobid="${jobid}" --taskid="${taskid}"  --start_time="$(date +%s)"

# Define output mosaic name as the first part of the input text file
outname=$(echo ${obslist} | awk 'BEGIN {FS="_"} {print $1}')
baseoutname=$(basename ${obslist})
outname=$(echo ${baseoutname%.*} | cut -d '_' -f-3)

echo "The constructed outname is ${outname}"

for image in "" "_weights"; do 
    if [ -e "${obslist%.txt}_temp_${subchan}${image}.txt" ]; then
        rm "${obslist%.txt}_temp_${subchan}${image}.txt"
    fi
done

# Create the image list -- use a temporary name for now
tmp="${obslist%.txt}_temp_${subchan}.txt"
tmp_weights="${obslist%.txt}_temp_${subchan}_weights.txt"

for tmp_d in "$tmp" "$tmp_bmaj" "$tmp_bmin" "$tmp_bpa" "$tmp_weights"; do
    if [[ -e "${tmp_d}" ]]; then
        rm "${tmp_d}"
    fi
done

used_obs=()

# TODO: Add the weights to the if condition as wel
for obsnum in ${obss[@]}
do
    if [[ -e ${obsnum}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}.fits ]]
    then

        echo "../${obsnum}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}.fits" >> "${tmp}"
        example=${obsnum}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}.fits

        # pass weight maps as a text file so the same weight maps can be used - not needed anymore
        echo "../${obsnum}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}_weight.fits" >> $tmp_weights
        
        # add obs that actually exist to list for later:
        used_obs+=(${obsnum})

    fi
done

# Use an image that exists to get the frequency range
if [[ ! -z $example ]]
then
    del=$(pyhead.py -p CDELT3 "${example}" | awk '{print $3/2}')
    mid=$(pyhead.py -p CRVAL3 "${example}" | awk '{print $3}')
    low=$(echo "${mid}" "${del}" | awk '{printf "%03.0f",($1-$2)/1e6}')
    high=$(echo "${mid}" "${del}" | awk '{printf "%03.0fMHz",($1+$2)/1e6 }')
else
    echo "No images found!"
    exit 1
fi

# Finish setting up output filenames by including the frequencies over which we integrate
outname="${outname}_${low}-${high}${filtered}"
# Also use this to define the list of images to be used
#imagelist=${outname}.list
imagelist=${outname}
# And the swarp template name
template=${outname}.template
# And some temporary output and weight output maps
weightout=${outname}_weight.fits
imageout=${outname}_temp
resampdir="./resamp_${low}-${high}/"

# Update processing database
# track_task.py start --jobid=${SLURM_JOBID} --taskid=$SLURM_ARRAY_TASK_ID --start_time=`date +%s`

if [[ ! -d ${mosaicdir} ]]
then
    mkdir ${mosaicdir}
fi

echo "Using directory ${mosaicdir}"

# Move the temporary image list to the mosaic directory and rename
mv "$tmp" "${mosaicdir}/${imagelist}.list"
mv "$tmp_weights" "${mosaicdir}/${imagelist}.weights.list"
cd "${mosaicdir}/" || exit 1

# Create a swarp template file for resampling
cat "${GXBASE}"/mosaics/resamp.swarp.tmpl \
    | sed "s;OUTIMAGE;${imageout}.fits;" \
    | sed "s;OUTWEIGHT;${weightout};" \
    | sed "s;WEIGHT_NAMES;${imagelist}.weights.list;" \
    | sed "s;RESAMPDIR;${resampdir};" \
    | sed "s;RACENT;${ra};" \
    | sed "s;DECENT;${dec};" > ${template}.resamp

if [[ ! -e ${outname}.fits ]] || [[ ! -e ${outname}_psfmap.fits ]]; then

    if [ -e "${resampdir}" ]; then
        rm -r "${resampdir}"
    fi

    mkdir "${resampdir}"

    echo "Generating resampled images for for ${obslist} subband $subchan."
    swarp -c "${template}.resamp" @"${imagelist}.list"
    # resampled images should now appear in ./resamp

    tmp_resamp=${imagelist}.list.resamp
    tmp_bmaj=${tmp_resamp}_bmaj
    tmp_bmin=${tmp_resamp}_bmin
    tmp_bpa=${tmp_resamp}_bpa
    tmp_weights=${imagelist}.weights.list.resamp

    n=0

    for obsnum in ${used_obs[@]}; do

        # keep name the same for easier naming rather than append .resamp
        echo "${resampdir}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}.fits" >> $tmp_resamp
        (( n=$n+1 ))
        # create snapshot PSF on resampled image: 
        # psf_projected.py new_image old_image
        psf_projected.py "${resampdir}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}.fits" "../${obsnum}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled.fits" &
        echo "${resampdir}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}_bmaj.fits" >> "${tmp_bmaj}"
        echo "${resampdir}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}_bmin.fits" >> "${tmp_bmin}"
        echo "${resampdir}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}_bpa.fits" >> "${tmp_bpa}"

        # weight maps are automatically renamed to .weight.fits apparently...
        echo "${resampdir}/${obsnum}_deep-${subchan}-image-pb_warp_rescaled${filtered}.weight.fits" >> "${tmp_weights}"

        if [[ $n -ge 5 ]]
        then
              n=0
              wait
       fi

    done

    wait

    for image in "" "_bmaj" "_bmin" "_bpa"; do
        
        # fill in the co-addition template
        cat "${GXBASE}/mosaics/coadd.swarp.tmpl" \
            | sed "s;OUTNAME;${imageout}${image};" \
            | sed "s;WEIGHT_NAMES;${imagelist}.weights.list.resamp;" \
            | sed "s;RACENT;${ra};" \
            | sed "s;DECENT;${dec};" > "${template}${image}.coadd"

        # we will rename the coadd.fits / coadd.weight.fits afterwards
        echo "Generating mosaic ${outname}${image}.fits for ${obslist} subband $subchan."
        swarp -c "${template}${image}.coadd" @"${imagelist}.list.resamp${image}"

        if [[ -e "${imageout}${image}.fits" ]]
        then
            # will this ever trim something in one image but not in another? 
            fits_trim.py "${imageout}${image}.fits" "${outname}${image}.fits"
            if [[ -e ${outname}${image}.fits ]]
            then
                pyhead.py -u FREQ "${mid}" "${outname}${image}.fits"
                rm "${imageout}${image}.fits"
            else
                echo "Could not generate mosaic ${outname}${image} for ${obslist} subband ${subchan}"
                exit 1
            fi
        else
            echo "Could not generate mosaic ${outname}${image} for ${obslist} subband ${subchan}"
            exit 1
        fi
    done

    # make PSF map and remove BMAJ, BMIN, BPA maps
    psf_combine_axes.py "${outname}_bmaj.fits" \
        "${outname}_bmin.fits" \
        "${outname}_bpa.fits" \
        -o "${outname}_psfmap.fits" \
        --remove

    rm -r "${resampdir}"
    # keep only one weight image
    rm "${imageout}_*.weight.fits"

else
    echo "Mosaic ${outname}.fits for ${obslist} subband $subchan already created."
fi

# Blur correction and final PSF generation
if [[ ! -e "${outname}_ddmod.fits" ]] || [[ ! -e "${outname}_psf.fits" ]]; then
    BANE --noclobber "${outname}.fits"

    # To create the final PSF map that I will use later, run source-finding without any PSF input
    if [[ ! -e "${outname}_comp.fits" ]]
    then
        aegean --cores=1 --progress --seedclip=10 --maxsummits=5 --autoload --table="${outname}.fits" "${outname}.fits"
    fi

    # Generate a measured PSF map
    if [[ ! -e "${outname}_psf.fits" ]]
    then
        psf_select.py --input="${outname}_comp.fits" --prefix="${low}-${high}"
        psf_create.py --input="${outname}_comp_psfcat.fits"
    fi

    # Run source-finding using the mosaicked PSF map as an input
    if [[ ! -e "${outname}_projpsf_comp.fits" ]]
    then
        aegean --cores=1 --progress --seedclip=10 --maxsummits=5 --autoload --table="${outname}_projpsf.fits" --psf="${outname}_psfmap.fits" "${outname}.fits"
    fi

    # Select sources and generate a new PSF map that has the right blur factor
    if [[ ! -e "${outname}_projpsf_psf.fits" ]]
    then
        psf_select.py --input="${outname}_projpsf_comp.fits" --prefix "${low}-${high}"
        psf_create.py --input="${outname}_projpsf_comp_psfcat.fits"
    fi

    # Multiply by blur factor
    if [[ ! -e "${outname}_ddmod.fits" ]]
    then
        dd_flux_mod.py "${outname}.fits" "${outname}_projpsf_psf.fits" "${outname}_ddmod.fits"
    fi

    # TODO: clean up intermediate files
else
    echo "Mosaic ${outname}_ddmod.fits for ${obslist} subband $subchan already created."
fi

# Rerun source-finding on blur-corrected map with measured PSF map
if [[ ! -e "${outname}_ddmod_comp.fits" ]]
then
    BANE --noclobber "${outname}_ddmod.fits"
    aegean --cores=1 --progress --seedclip=4 --maxsummits=5 --autoload --table="${outname}_ddmod.fits" --psf="${outname}_psf.fits" "${outname}_ddmod.fits"
fi

if [[ -e ${outname}_ddmod.fits ]]
then
    echo "Mosaic successful!"
    track_task.py finish_mosaic  --jobid="${jobid}" --taskid="${taskid}"  --finish_time="$(date +%s)"
else
    echo "Mosaic failed!"
    track_task.py fail_mosaic  --jobid="${jobid}" --taskid="${taskid}"  --finish_time="$(date +%s)"
    exit 1
fi
