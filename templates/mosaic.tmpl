#!/bin/bash -l

pipeuser=PIPEUSER

set -x

base=BASEDIR
obslist=OBSLIST
mosaicdir=MOSAICDIR
channel=CHANNEL

cd "${base}" || exit 1

if [[ -z ${mosaicdir} ]]
then
    mosaicdir='mosaic'
fi

taskid=${SLURM_ARRAY_TASK_ID}
jobid=${SLURM_ARRAY_JOB_ID}
subchans=(0000 0001 0002 0003 MFS)
subchan=${subchans[$SLURM_ARRAY_TASK_ID]}

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"
echo "subchan: ${subchan}"

# Define output mosaic name as the first part of the input text file
outname=JDGP_mosaic_${channel}_${subchan}

for image in "" "_rmss"; do
    if [ -e "${obslist%.txt}_temp_${channel}_${subchan}${image}.txt" ]; then
        rm "${obslist%.txt}_temp_${channel}_${subchan}${image}.txt"
    fi
done

# Create the image list -- use a temporary name for now
tmp="${obslist%.txt}_temp_${channel}_${subchan}.txt"
tmp_rmss="${obslist%.txt}_temp_${channel}_${subchan}_rmss.txt"

for tmp_d in "$tmp" "$tmp_bmaj" "$tmp_bmin" "$tmp_bpa" "$tmp_rmss"; do
    if [[ -e "${tmp_d}" ]]; then
        rm "${tmp_d}"
    fi
done

# Changing the name of the images
while IFS="," read -r dec group
do
    if [[ -e Dec${dec}/${group}/${channel}/all_deep_ms-ro-${subchan}-image-pb_warp.fits ]]
    then

        mv Dec${dec}/${group}/${channel}/all_deep_ms-ro-${subchan}-image-pb_warp.fits Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.fits
        mv Dec${dec}/${group}/${channel}/all_deep_ms-ro-${subchan}-image-pb_warp_rms.fits Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp_rms.fits

    fi
done < ${obslist}

# Reading and copying images
while IFS="," read -r dec group
do
    if [[ -e Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.fits ]]
    then

        echo "../Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.fits" >> "${tmp}"
        example=Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.fits

        # pass weight maps as a text file so the same weight maps can be used - not needed anymore
        echo "../Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp_rms.fits" >> $tmp_rmss
    fi
done < ${obslist}

# Also use this to define the list of images to be used
imagelist=${outname}
# And the swarp template name
template=${outname}.template
# And some temporary output and weight output maps
imageout=${outname}_temp
rmsout=${imageout}
resampdir="./resamp_${channel}-${subchan}/"

if [[ ! -d ${mosaicdir} ]]
then
    mkdir ${mosaicdir}
fi

echo "Using directory ${mosaicdir}"

# Move the temporary image list to the mosaic directory and rename
mv "$tmp" "${mosaicdir}/${imagelist}.list"
mv "$tmp_rmss" "${mosaicdir}/${imagelist}.rmss.list"
cd "${mosaicdir}/" || exit 1

# Create a swarp template file for resampling
cat "${GXBASE}"/mosaics/galcar_weighted.swarp \
    | sed "s;OUTNAME;${imageout};" \
    | sed "s;OUTWEIGHT;${rmsout};" \
    | sed "s;WEIGHT_NAMES;${imagelist}.rmss.list;" \
    | sed "s;RESAMPDIR;${resampdir};" > ${template}.resamp

if [[ ! -e ${outname}.fits ]] || [[ ! -e ${outname}_psfmap.fits ]]; then
    if [ -e "${resampdir}" ]; then
        rm -r "${resampdir}"
    fi

    mkdir "${resampdir}"

    echo "Generating resampled images for ${obslist} subband $subchan."
    swarp -c "${template}.resamp" @"${imagelist}.list"
    # resampled images should now appear in ./resamp


############################## Introducing additional step to correct for the weight map of the final mosaic ###################################
    # I think i have to make a for/while loop. 
#    /software/projects/mwasci/smantovanini/GLEAM-X-pipeline/gleam_x/bin/calc_weight.py --weight=${rmsout}.rms.fits --output=${rmsout}.rms_new.fits

#    cat "${GXBASE}"/mosaics/weighted.swarp \
#    | sed "s;OUTNAME;${imageout};" \
#    | sed "s;OUTWEIGHT;${rmsout}.rms_new.fits;" \
#    | sed "s;WEIGHT_NAMES;${imagelist}.rmss.list;" \
#    | sed "s;RESAMPDIR;${resampdir};" > ${template}.resamp
    
#    echo "Generating resampled images for ${obslist} subband $subchan."
#    swarp -c "${template}.resamp" @"${imagelist}.list"
    # resampled images should now appear in ./resamp

################################################################################################################################################

    tmp_resamp=${imagelist}.list.resamp
    tmp_bmaj=${tmp_resamp}_bmaj
    tmp_bmin=${tmp_resamp}_bmin
    tmp_bpa=${tmp_resamp}_bpa
    tmp_rmss=${imagelist}.rmss.list.resamp
    
    while IFS="," read -r dec group
    do
        # keep name the same for easier naming rather than append .resamp
        echo "${resampdir}all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.resamp.fits" >> $tmp_resamp
    
        # create snapshot PSF: 
        # psf_projected.py new_image old_image
        psf_projected.py "${resampdir}all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.resamp.fits" "../Dec${dec}/${group}/${channel}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.fits" &
        echo "${resampdir}all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.resamp_bmaj.fits" >> "${tmp_bmaj}"
        echo "${resampdir}all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.resamp_bmin.fits" >> "${tmp_bmin}"
        echo "${resampdir}all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.resamp_bpa.fits" >> "${tmp_bpa}"

        # weight maps are automatically renamed to .weight.fits apparently...
        echo "${resampdir}/all_deep_ms-ro-${dec}-${group}-${subchan}-image-pb_warp.resamp.weight.fits" >> "${tmp_rmss}"
    done < ../${obslist}

    wait
    
    for image in "_bmaj" "_bmin" "_bpa"; do

        cat "${GXBASE}"/mosaics/galcar_weighted_psf.swarp \
        | sed "s;OUTNAME;${imageout}${image};" \
        | sed "s;OUTWEIGHT;${rmsout}${image};" \
        | sed "s;WEIGHT_NAMES;${imagelist}.rmss.list.resamp;" \
        | sed "s;RESAMPDIR;${resampdir};" > ${template}${image}.resamp

        echo "Generating resampled images for ${obslist}${image} subband $subchan."
        swarp -c "${template}${image}.resamp" @"${imagelist}.list.resamp${image}"
    done

    for image in "" "_bmaj" "_bmin" "_bpa"; do
        fits_trim.py "${imageout}${image}.fits" "${outname}${image}.fits"
    done

    # make PSF map and remove BMAJ, BMIN, BPA maps
    psf_combine_axes.py "${outname}_bmaj.fits" \
        "${outname}_bmin.fits" \
        "${outname}_bpa.fits" \
        -o "${outname}_psfmap.fits" \
        --remove

    rm -r "${resampdir}"
    # keep only one weight image
    rm "${imageout}_*.rms.fits"

else
    echo "Mosaic ${outname}.fits for ${obslist} subband $subchan already created."
fi

# Blur correction and final PSF generation
if [[ ! -e "${outname}_ddmod.fits" ]] || [[ ! -e "${outname}_psf.fits" ]]; then
    BANE --noclobber --cores 1 "${outname}.fits"

    # To create the final PSF map that I will use later, run source-finding without any PSF input
    if [[ ! -e "${outname}_comp.fits" ]]
    then
        aegean --progress --cores=${GXNCPUS} --seedclip=10 --maxsummits=5 --autoload --table="${outname}.fits" "${outname}.fits"
    fi

    # Generate a measured PSF map
    if [[ ! -e "${outname}_psf.fits" ]]
    then
        psf_select.py --input="${outname}_comp.fits" --prefix="${channel}-${subchan}"
        psf_create.py --input="${outname}_comp_psfcat.fits"
    fi

    # Run source-finding using the mosaicked PSF map as an input
    if [[ ! -e "${outname}_projpsf_comp.fits" ]]
    then
        aegean --progress --cores=${GXNCPUS} --seedclip=10 --maxsummits=5 --autoload --table="${outname}_projpsf.fits" --psf="${outname}_psfmap.fits" "${outname}.fits"
    fi

    # Select sources and generate a new PSF map that has the right blur factor
    if [[ ! -e "${outname}_projpsf_psf.fits" ]]
    then
        psf_select.py --input="${outname}_projpsf_comp.fits" --prefix "${channel}-${subchan}"
        psf_create.py --input="${outname}_projpsf_comp_psfcat.fits"
    fi

    # Multiply by blur factor
    if [[ ! -e "${outname}_ddmod.fits" ]]
    then
        dd_flux_mod.py "${outname}.fits" "${outname}_projpsf_psf.fits" "${outname}_ddmod.fits"
    fi
else
    echo "Mosaic ${outname}_ddmod.fits for ${obslist} subband $subchan already created."
fi

# Rerun source-finding on blur-corrected map with measured PSF map
if [[ ! -e "${outname}_ddmod_comp.fits" ]]
then
    BANE --cores 1 --noclobber "${outname}_ddmod.fits"
    aegean --progress --cores=${GXNCPUS} --seedclip=4 --maxsummits=5 --autoload --table="${outname}_ddmod.fits" --psf="${outname}_psf.fits" "${outname}_ddmod.fits"
fi

if [[ -e ${outname}.fits ]]
then
    echo "Mosaic successful!"
else
    echo "Mosaic failed!"
    exit 1
fi
