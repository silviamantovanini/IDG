#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

taskid=1
jobid="${SLURM_JOB_ID}"

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
    if [[ $1 != 0 ]]
    then
        track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
        exit "$1"
    fi
}

track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

# Makes fits_warp parallelisation work on Zeus
# export KMP_INIT_AT_FORK=false

# Sub-channels
subchans="0000 0001 0002 0003 MFS"

# flux_warp method
method=scaled

# Sky model
POS_MODEL_CATALOGUE="${GXBASE}/models/Catalog_sparse_unresolved.fits"
FLUX_MODEL_CATALOGUE="${GXBASE}/models/GGSM_sparse_unresolved.fits"
# Set max separation for flux_warp crossmatch as ~ 1' -- unlikely that the ionosphere would be that brutal
separation=$(echo "60/3600" | bc -l)

# Set exclusion for flux_warp internal exclusive crossmatch as ~ 3'
exclusion=$(echo "180/3600" | bc -l)

datadir=BASEDIR

metafits="./${obsnum}/${obsnum}.metafits"
if [[ ! -e ${metafits} ]] || [[ ! -s ${metafits} ]]
then
    wget -O "${metafits}" http://ws.mwatelescope.org/metadata/fits?obs_id=${obsnum}
    #1119878816
    test_fail $?
fi

chan=$(pyhead.py -p CENTCHAN "$metafits" | awk '{print $3}')
ra=$(pyhead.py -p RA "$metafits" | awk '{print $3}')
dec=$(pyhead.py -p DEC "$metafits" | awk '{print $3}')
b=$(python -c "import astropy.units as u; from astropy.coordinates import SkyCoord; print(abs(SkyCoord($ra*u.deg, $dec*u.deg).galactic.b.deg))")
minsrcs=500
if [[ "${chan}" -eq 69 ]] && (( $(echo  "$b < 10" | bc -l) ))
then
    minsrcs=50
fi

for subchan in ${subchans}
do
    BMAJ=$(pyhead.py -p BMAJ "all_deep_ms-ro-${subchan}-image-pb.fits" | awk '{print $3}' )
    if [[ "$BMAJ" == "0"  ]]
    then
        echo "all_deep_ms-ro-${subchan}-image-pb.fits has zero-size PSF: something is broken!"
        exit 1
    fi
        
    BANE --cores 1 "all_deep_ms-ro-${subchan}-image-pb.fits"
    aegean --cores ${GXNCPUS} --autoload --table="./all_deep_ms-ro-${subchan}-image-pb.fits" "./all_deep_ms-ro-${subchan}-image-pb.fits" > >(tee -a "all_deep_ms-ro-${subchan}_aegean.log") 2> >(tee -a "all_deep_ms-ro-${subchan}_aegean.log" >&2)

    nsrc=$(grep "INFO found" "all_deep_ms-ro-${subchan}_aegean.log" | head -1 | awk '{print $3}')
    if [[ $nsrc -lt $minsrcs ]]
    then
        echo "Can't warp image -- only $nsrc sources and minimum required id $minsrcs -- probably a horrible image"
    else
        RA=$(pyhead.py -p RA "$metafits" | awk '{print $3}' )
        Dec=$(pyhead.py -p DEC "$metafits" | awk '{print $3}' )
        chan=$(pyhead.py -p CENTCHAN "$metafits" | awk '{print $3}' )
        mid=$(pyhead.py -p CRVAL3 "all_deep_ms-ro-${subchan}-image-pb.fits" | awk '{print $3}' )
        freqq=$(echo "$mid" | awk '{printf "%03.0f",($1)/1e6}')
        
        # Roughly the centre and radius of the image:
        coords="$RA $Dec"
        radius=50. #24.8
        
        if [[ ! -e "all_deep_ms-ro-${subchan}_complete_sources_xm.fits" ]]
        then
            fits_warp.py \
            --incat "all_deep_ms-ro-${subchan}-image-pb_comp.fits" \
            --refcat "${POS_MODEL_CATALOGUE}" \
            --xm "all_deep_ms-ro-${subchan}_complete_sources_xm.fits" \
            --plot \
            --ra1 ra \
            --dec1 dec \
            --ra2 RAJ2000 \
            --dec2 DEJ2000 \
            --infits "all_deep_ms-ro-${subchan}-image-pb.fits"
        fi
        
        if [[ ! -e "all_deep_ms-ro-${subchan}-image-pb_warp.fits" ]]
        then
            fits_warp.py --incat "./all_deep_ms-ro-${subchan}-image-pb_comp.fits" \
            --refcat "${POS_MODEL_CATALOGUE}" \
            --corrected "./all_deep_ms-ro-${subchan}-image-pb_comp_warp-corrected.fits" \
            --xm "./all_deep_ms-ro-${subchan}_fits_warp_xm.fits" \
            --suffix warp \
            --infits "./all_deep_ms-ro-${subchan}-image-pb.fits" \
            --ra1 ra --dec1 dec \
            --ra2 RAJ2000 --dec2 DEJ2000 \
            --plot \
            --nsrcs 750 \
            --vm 10 \
            --progress \
            --cores ${GXNPCPUS} \
            --signal peak_flux_1 \
            --enforce-min-srcs 100
        fi

        
        if [[ ! -e all_deep_ms-ro-${subchan}_xm.fits ]]
        then
            # flux_wrap dependency here
            # Match the image catalogue to the model table:
            match_catalogues \
            "all_deep_ms-ro-${subchan}-image-pb_comp_warp-corrected.fits" \
            "${FLUX_MODEL_CATALOGUE}" \
            --separation "${separation}" \
            --exclusion_zone "${exclusion}" \
            --outname "./all_deep_ms-ro-${subchan}_xm.fits" \
            --threshold 0.5 \
            --nmax 1000 \
            --coords ${coords} \
            --radius "${radius}" \
            --ra2 "RAJ2000" \
            --dec2 "DEJ2000" \
            --ra1 "ra" \
            --dec1 "dec" \
            -F "int_flux" \
            --eflux "err_int_flux" \
            --localrms "local_rms"
        fi
        if [[ ! -e "all_deep_ms-ro-${subchan}-image-pb_warp_${method}_cf_output.txt" ]]
        then
            flux_warp \
            "all_deep_ms-ro-${subchan}_xm.fits" \
            "all_deep_ms-ro-${subchan}-image-pb_warp.fits" \
            --mode mean \
            --freq "${freqq}" \
            --threshold 0.5 \
            --nmax 400 \
            --flux_key "flux" \
            --smooth 5.0 \
            --ignore_magellanic \
            --localrms_key "local_rms" \
            --add-to-header \
            --ra_key "RAJ2000" \
            --dec_key "DEJ2000" \
            --index "alpha" \
            --curvature "beta" \
            --ref_flux_key "S_200" \
            --ref_freq 200.0 \
            --alpha -0.77 \
            --plot \
            --cmap "gnuplot2" \
            --update-bscale \
            --order 2 \
            --ext png \
            --nolatex
        fi
        factor=$(pyhead.py -p BSCALE "all_deep_ms-ro-${subchan}-image-pb_warp.fits" | awk '{print $3}')
      
        # The RMS and BKG maps will not have changed much from the ionospheric warping, so I can just
        # rename them and update BSCALE
        mv "all_deep_ms-ro-${subchan}-image-pb_rms.fits" "all_deep_ms-ro-${subchan}-image-pb_warp_rms.fits"
        mv "all_deep_ms-ro-${subchan}-image-pb_bkg.fits" "all_deep_ms-ro-${subchan}-image-pb_warp_bkg.fits"
        pyhead.py -u BSCALE "$factor" "all_deep_ms-ro-${subchan}-image-pb_warp_bkg.fits"
        pyhead.py -u BSCALE "$factor" "all_deep_ms-ro-${subchan}-image-pb_warp_rms.fits"
        
        # rerun the source-finding -- don't save to the log this time as the numbers should not have changed
        if [[ ! -e "all_deep_ms-ro-${subchan}-image-pb_warp_comp.fits" ]]
        then
            aegean --cores ${GXNCPUS} --autoload --table="./all_deep_ms-ro-${subchan}-image-pb_warp.fits" "./all_deep_ms-ro-${subchan}-image-pb_warp.fits"
        fi
    fi
done

track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
