#! /bin/bash -l

module load singularity

source /software/projects/mwasci/smantovanini/GLEAM-X-pipeline/GLEAM-X-pipeline-garrawarla.profile

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

df -h | grep /nvmetmp

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

# Set version number
base=BASEDIR
debug=DEBUG
# Which data column to image
if [[ ! -z $debug ]]
then
    datacolumn="CORRECTED_DATA"
else
    datacolumn="DATA"
fi

# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# Minimum uvw for self-calibration (in lambda)
minuv=75
# S/N Level at which to choose masked pixels for deepclean
msigma=3 #2
# S/N Threshold at which to stop cleaning
tsigma=0.3 #1

# Update database
cd "${base}" || exit

datadir="${base}/${obsnum}"
cd "${datadir}" || exit

# TODO: replace with find
metafits="$(ls -t ${obsnum}*metafits* | head -1)"
cp -rf ${obsnum}.ms /nvmetmp/

#Need to double check that "shift" had been removed
current=$(singularity exec -B /nvmetmp/ /software/projects/mwasci/gleamx_testing_small.img chgcentre "/nvmetmp/${obsnum}.ms")

if [[ $current == *"shift"* ]]
then
    echo "Detected that this measurement set has undergone a denormal shift; this must be undone before subtrmodel."
    coords=$(singularity exec /software/projects/mwasci/gleamx_testing_small.img calc_pointing.py "${metafits}")
    echo "Optimally shifting co-ordinates of measurement set to $coords, without zenith shiftback."
    singularity exec -B /nvmetmp/ /software/projects/mwasci/gleamx_testing_small.img chgcentre \
            "/nvmetmp/${obsnum}.ms" \
            ${coords}
else
    echo "Detected that no shift is needed for this measurement set."
fi

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
fi

# Set up channel-dependent options
chan="$(singularity exec /software/projects/mwasci/gleamx_testing_small.img pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(singularity exec /software/projects/mwasci/gleamx_testing_small.img pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(singularity exec /software/projects/mwasci/gleamx_testing_small.img pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(singularity exec /software/projects/mwasci/gleamx_testing_small.img pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)

# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Naming convention for output files
lowfreq=$(echo "${centfreq}" "${bandwidth}" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}')
highfreq=$(echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}')
freqrange="${lowfreq}-${highfreq}"

# Calculate min uvw in metres
minuvm=$(echo "234 * $minuv / $chan" | bc -l)

# Found that multiscale cleaning recovers flux density in the extragalactic sky better than not, and doesn't add much to processing time
multiscale="-multiscale -mgain 0.85 -multiscale-gain 0.15"

# Create a template image that has all the same properties as our eventual WSClean image
if [[ ! -e "${obsnum}_template.fits" ]]
then
    singularity exec --nv -B /nvmetmp/ /software/projects/mwasci/smantovanini/GLEAM-X-pipeline/gpu_stuff.img wsclean \
            -abs-mem ${GXMEMORY} \
            -j ${SLURM_CPUS_PER_TASK} \
            -mgain 1.0 \
            -nmiter 1 \
            -use-wgridder \
            -niter 0 \
            -name ${obsnum}_template \
            -size ${imsize} ${imsize} \
            -scale ${scale:0:8} \
            -pol XX \
            -data-column ${datacolumn} \
            -channel-range 4 5 \
            -interval 4 5 \
            -nwlayers ${GXNCPUS} \
            -temp-dir /nvmetmp/ \
            "/nvmetmp/${obsnum}.ms"

    rm "${obsnum}_template-dirty.fits"
    mv "${obsnum}_template-image.fits" "${obsnum}_template.fits"
fi

# Hardcoding John's PB script location for now
# Also hardcoding creating four sub-band beams
pols="XX XXi XY XYi YX YXi YY YYi"

for n in {0..3}
do
    i=$((n * 6))
    cstart=${chans[$i]}
    j=$((i + 5))
    cend=${chans[$j]}
    for pol in $pols
    do 
        if [[ ! -e "${obsnum}_000${n}-${pol}-beam.fits" ]]
        then
            singularity exec /software/projects/mwasci/gleamx_testing_small.img lookup_jones.py ${obsnum} _template.fits ${obsnum}_000${n}- -c $cstart-$cend --wsclean_names
        fi
        ln -s "${obsnum}_000${n}-${pol}-beam.fits" "${obsnum}_deep-000${n}-beam-${pol}.fits"
    done
done

# Set the pipefail so the test_fail does not test for tee
set -o pipefail
# Deep clean (for pipeline)
singularity exec --nv -B /pawsey/mwa/,/nvmetmp/ /software/projects/mwasci/smantovanini/GLEAM-X-pipeline/gpu_stuff.img wsclean \
        -abs-mem ${GXMEMORY} \
        -j ${SLURM_CPUS_PER_TASK} \
        $multiscale \
        -nmiter 5 \
        -niter 10000000 \
        -use-wgridder \
        -mwa-path /pawsey/mwa/ \
        -apply-primary-beam \
        -auto-mask ${msigma} \
        -auto-threshold ${tsigma} \
        -name ${obsnum}_deep \
        -size ${imsize} ${imsize} \
        -scale ${scale:0:8} \
        -weight briggs ${robust} \
        -pol I \
        -join-channels \
        -channels-out 4 \
        -save-source-list \
        -fit-spectral-pol 2 \
        -data-column ${datacolumn} \
        -temp-dir /nvmetmp/ \
        "/nvmetmp/${obsnum}.ms" | tee wsclean.log

rm -rf ${obsnum}.ms && cp -rf /nvmetmp/${obsnum}.ms ./
